// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  publicId  String?  @unique
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())

  watchlist   Watchlist[]
  watched     Watched[]
  review      Review[]
  connections Connection[]
  rating      Rating[]

  @@map("users")
}

model Watchlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  createdAt DateTime @default(now())

  user   User               @relation(fields: [userId], references: [id])
  movies MovieOnWatchlist[]

  @@map("watchlists")
}

model MovieOnWatchlist {
  id          Int     @id @default(autoincrement())
  movieId     Int
  watchlistId Int
  isWatched   Boolean

  movie     Movie     @relation(fields: [movieId], references: [id])
  watchlist Watchlist @relation(fields: [movieId], references: [id])

  @@map("movie_on_watchlist")
}

model Movie {
  id     Int    @id
  title  String
  poster String

  watched          Watched[]
  review           Review[]
  movieOnWatchlist MovieOnWatchlist[]

  @@map("movies")
}

model Watched {
  id        Int      @id @default(autoincrement())
  userId    Int
  movieId   Int
  ratingId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  movie  Movie  @relation(fields: [movieId], references: [id])
  rating Rating @relation(fields: [ratingId], references: [id])

  @@map("timelines")
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  movieId     Int
  title       String?
  description String
  createdAt   DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])

  @@map("reviews")
}

model Connection {
  id         Int      @id @default(autoincrement())
  userId     Int
  friendId   Int
  isAccepted Boolean
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("connections")
}

model Rating {
  id        Int      @id @default(autoincrement())
  userId    Int
  movieId   Int
  createdAt DateTime @default(now())

  user    User      @relation(fields: [userId], references: [id])
  Watched Watched[]

  @@map("ratings")
}
